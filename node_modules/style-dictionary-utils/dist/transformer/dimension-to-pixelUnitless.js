"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dimensionToPixelUnitless = void 0;
const isDimension_1 = require("../filter/isDimension");
/**
 * @description base font size from options or 16
 * @param options
 * @returns number
 */
const getBasePxFontSize = (options) => (options === null || options === void 0 ? void 0 : options.basePxFontSize) ? options.basePxFontSize : 16;
/**
 * @description checks if token value has a specific unit
 * @param value token value
 * @param unit unit string like px or value
 * @returns boolean
 */
const hasUnit = (value, unit) => {
    if (typeof value === 'number') {
        return false;
    }
    return value.indexOf(unit) > -1;
};
/**
 * @description converts dimension tokens value to float without unit, ignores `em` as they are relative to the font size of the parent element
 * @type value transformer â€” [StyleDictionary.ValueTransform](https://github.com/amzn/style-dictionary/blob/main/types/Transform.d.ts)
 * @matcher matches all tokens of $type `dimension`
 * @transformer returns a float number
 */
exports.dimensionToPixelUnitless = {
    type: `value`,
    transitive: true,
    matcher: isDimension_1.isDimension,
    transformer: (token, options) => {
        const baseFont = getBasePxFontSize(options);
        const floatVal = parseFloat(token.value);
        if (isNaN(floatVal)) {
            throw new Error(`Invalid dimension token: '${token.name}: ${token.value}' is not valid and cannot be transform to 'float' \n`);
        }
        if (floatVal === 0) {
            return 0;
        }
        if (hasUnit(token.value, 'rem')) {
            return floatVal * baseFont;
        }
        if (hasUnit(token.value, 'px')) {
            return floatVal;
        }
        return token.value;
    },
};
