"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cssAdvanced = void 0;
const style_dictionary_1 = __importDefault(require("style-dictionary"));
const prettier_1 = require("prettier");
const { fileHeader, formattedVariables } = style_dictionary_1.default.formatHelpers;
const cssAdvanced = ({ dictionary: originalDictionary, options = {
    queries: []
}, file, platform }) => {
    var _a;
    const { outputReferences, descriptions } = options;
    const queries = ((_a = file === null || file === void 0 ? void 0 : file.options) === null || _a === void 0 ? void 0 : _a.queries) || [{
            query: undefined,
            matcher: () => true
        }];
    const formatting = {
        commentStyle: descriptions ? 'long' : 'none',
    };
    const dictionary = Object.assign({}, originalDictionary);
    // add prefix to tokens
    if (platform.prefix) {
        dictionary.allTokens = dictionary.allTokens.map(token => (Object.assign(Object.assign({}, token), { name: platform.prefix + '-' + token.name, path: [platform.prefix, ...token.path] })));
    }
    // add file header
    const output = [fileHeader({ file })];
    // add single theme css
    for (const query of queries) {
        const { query: queryString, matcher } = query;
        // filter tokens to only include the ones that pass the matcher
        const filteredDictionary = Object.assign(Object.assign({}, dictionary), { allTokens: dictionary.allTokens.filter(matcher || (() => true)) });
        // early abort if no matches
        if (!filteredDictionary.allTokens.length)
            continue;
        // add tokens into root
        const rootCss = `:root {
  ${formattedVariables({ format: 'css', dictionary: filteredDictionary, outputReferences, formatting })}
}`;
        // add css with or without query
        output.push(queryString ? `${queryString} { ${rootCss} }` : rootCss);
    }
    // return prettified
    return (0, prettier_1.format)(output.join('\n'), { parser: 'css', printWidth: 500 });
};
exports.cssAdvanced = cssAdvanced;
